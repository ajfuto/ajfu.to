{
    "componentChunkName": "component---src-templates-post-template-js",
    "path": "/remove-untracted-git-files",
    "result": {"data":{"site":{"siteMetadata":{"title":"ajfu.to","siteUrl":"https://ajfu.to"}},"mdx":{"id":"4d20e654-53bc-595c-a9a0-6c27afe13ba4","timeToRead":1,"excerpt":"Reverting changes If you simply want to revert your changes to the most recent commit: To remove files that are untracked, we'll use  git clean . Dry run gitâ€¦","fields":{"slug":"/remove-untracted-git-files"},"frontmatter":{"title":"How to remove untracked git files","date":"July 19, 2022","description":"Cleaning your git repositories of untracked files","image":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"How to remove untracked git files\",\n  \"date\": \"2022-07-19T04:22:23.376Z\",\n  \"description\": \"Cleaning your git repositories of untracked files\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Reverting changes\"), mdx(\"p\", null, \"If you simply want to revert your changes to the most recent commit:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"console\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-console\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"git reset --hard\"))), mdx(\"p\", null, \"To remove files that are untracked, we'll use \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"git clean\"), \".\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Dry run\"), mdx(\"p\", null, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"git clean\"), \" has a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dry run\"), \" option (\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"-n\"), \") where we can preview any changes that would be made. \"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"console\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-console\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"git clean -n\"))), mdx(\"p\", null, \"This shows any files in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"current directory\"), \" that would be deleted. \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"git clean\"), \" avoids recursing into further directories by default. To recurse into other folders, use the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"-d\"), \" option.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"console\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-console\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"git clean -nd\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Let's go!\"), mdx(\"p\", null, \"To actually clean the files, use \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"-f\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"console\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-console\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"git clean -f\"))), mdx(\"p\", null, \"Again, this removes files in your current directory. To remove files recursively in subdirectories, use \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"-d\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"console\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-console\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"git clean -fd\"))), mdx(\"p\", null, \"To clean files that are ignored (i.e., they're in \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \".gitignore\"), \"), use \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"-x\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"console\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-console\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"git clean -fx\"))), mdx(\"p\", null, \"For an interactive experience, use \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"-i\"), \". This can also be paired with \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"-d\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"console\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-console\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"git clean -id\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Summary\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"-n\"), \" to preview any changes that may be made\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"-d\"), \" to recurse into subdirectories\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to actually delete, use \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"-i\"), \" for an interactive experience or use \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"-f\"), \" to force\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"previous":{"fields":{"slug":"/about-this-site"},"frontmatter":{"title":"About this site"}},"next":{"fields":{"slug":"/change-default-python-version"},"frontmatter":{"title":"How to change default Python version"}}},"pageContext":{"id":"4d20e654-53bc-595c-a9a0-6c27afe13ba4","previousPostId":"1eb2d41f-ad0b-5424-82cd-186608536967","nextPostId":"070b96de-1d34-597b-aa5d-5f876e0b7f1a"}},
    "staticQueryHashes": ["4061151221"]}